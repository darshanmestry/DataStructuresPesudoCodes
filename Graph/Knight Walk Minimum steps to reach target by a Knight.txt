/ Method returns minimum step to reach target position 
int minStepToReachTarget(int knightPos[], int targetPos[], 
                                                int N) 
{ 
    // x and y direction, where a knight can move 
    int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2}; 
    int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1}; 
  
    // queue for storing states of knight in board 
    queue<cell> q; 
  
    // push starting position of knight with 0 distance 
    q.push(cell(knightPos[0], knightPos[1], 0)); 
  
    cell t; 
    int x, y; 
    bool visit[N + 1][N + 1]; 
  
    // make all cell unvisited 
    for (int i = 1; i <= N; i++) 
        for (int j = 1; j <= N; j++) 
            visit[i][j] = false; 
  
    // visit starting state 
    visit[knightPos[0]][knightPos[1]] = true; 
  
    // loop untill we have one element in queue 
    while (!q.empty()) 
    { 
        t = q.front(); 
        q.pop(); 
  
        // if current cell is equal to target cell, 
        // return its distance 
        if (t.x == targetPos[0] && t.y == targetPos[1]) 
            return t.dis; 
  
        // loop for all reachable states 
        for (int i = 0; i < 8; i++) 
        { 
            x = t.x + dx[i]; 
            y = t.y + dy[i]; 
  
            // If reachable state is not yet visited and 
            // inside board, push that state into queue 
            if (isInside(x, y, N) && !visit[x][y]) { 
                visit[x][y] = true; 
                q.push(cell(x, y, t.dis + 1)); 
            } 
        } 
    } 
} 

=====


Class pair
{
	int i,j;
	pair(int i,int j)
	{
		this.i=i;
		this.j=j
	}
}
int check(int[,] arr,int si,int sj,int di,int dj)
{
	int rmoves={-2,-2,-1,-1,1,1,2,2}
	int cmoves={ -1,1,-2,2,-2,2,-1,1}
	int rlen=arr.GetLength(0);
	int clen=arr.GetLength(1);
	bool[,] visited	=new bool[rlen,clen];
	int ans=0;
	Queue<pair> q=new LinkedList<pair>();

	
	q.add(new pair(si,sj);
	q.add(null);
       visited[si,sj]=true

	while(!q.isEmpty())
	{
		
		while(q.peek()!=null)
		{
			Pair p=q.peek();
			for(int i=0;i<8;i++)
			{
				if(isValid(p.i+rmoves[i] ,sj+cmoves[i]) && !visited[p.i+rmoves[i] ,sj+cmoves[i]])			
				{
					ans++
					flag=true
					q.add(new pair(p.i+rmoves[i] ,sj+cmoves[i]));
					visited[p.i+rmoves[i] ,sj+cmoves[i]]=true;
					if(p.i+rmoves[i]==di && sj+cmoves[i]==dj)
						return ans
				}
			}

			q.poll();
		}
		q.poll()
		if(!q.IsEmpty())
			q.add(null);

	
	}
	
}
bool isValid(int i,int j)
{
	return (i>0 && j>0) && (i<arr.GetLength(0))&& (j<arr.Getlength(1))
}