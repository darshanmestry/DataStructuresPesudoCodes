int findPivot(int arr[],int s,int e)
{
	int m=(s+e)/2)

	if(a[m]>a[m+1])
	return m+1 //this is pivot
	else
	{
		if(arr[s]>arr[m])
			findpivot(arr,s,m-1)
		else
			findpivot(arr,m+1,e)
	}
}

once we get the pivot

if s>pivot and s<e
	then serach element on right side of pivot apply BinarySearch
else  
	search element on the left side of array 	 BinarySearch

FULL CODE
int findpivot(int[] arr,int s,int e)
{
	int m=(s+e)/2	

	if(a[m]>a[m+1])
		return m+1
	else
	{
		if(a[s]>a[m])
		 findpivot(arr,s,m-1)
		else
		 findpivot(arr,m+1,e)
	}
}


void main(int[] arr, int s,int e)
{
	int pivot=findpivot(arr,s,e)
	if(find>pivot && find<e)
		binarysearch(arr,pivot,e)

	else
		bonarysearcg(arr,s,pivot-1)

		
}

void binarySearch(int[] arr, int s ,int e)
{
	int m=(s+e)/2
	if(s>e)
	{
		if(arr[m]==elem)
			return elemt found at index m
		else 
		{
			if(elem<a[m])
				 binarySearch(arr,s,m-1)
			else
				binarsysearch(Arr,m+1,e)

		}
		
	}
}