
It would be a simple deletion problem from the singly linked list if the head pointer was given because for deletion you must know the previous node and you can easily reach there by traversing from the head pointer. Conventional deletion is impossible without knowledge of the previous node of a node which needs to be deleted.

The trick here is we can copy the data of the next node to the data field of the current node to be deleted. Then we can move one step forward. Now our next has become the current node and current has become the previous node. Now we can easily delete the current node by conventional deletion methods.

For example, suppose we need to delete C and a pointer to C is given. If we had a pointer to B we could have deleted C easily. But here we will copy the data field of D to the data field of C. Then we will move forward. Now we are at D and we have a pointer to C i.e. the previous pointer. So we will delete D. That’s how the node C will be deleted.
o(1)
void nodeToDeleteWithoutHead(node* n )
{
	if(n==null)
	  return
	else
	{
		if(node->next==null)
		{
		  print "Not possible"
		  return
		}
		node* temp=n->next
		n->data=n->next->data
		n->next=n->next->next

		delete temp
	}
	
}