
OPTIMAL SOLUTION USING QUEUE

int result=0
void getMaxWidth(node *root)
{
	Queue q=new Queue

	q.push(root->Data)

	while(!q.isEmpty())
	{
		int count=q.size()

		
		q.pop()
	
		result=MAX(result,count)
		while(count--)
		{
			node *temp*q.front();	
			if(temp->left)
				q.push(temp->left)
			if(temp->right)
				q.push(temp->right)
		}
	
	}
return result
}




Maximum width of a binary tree
Given a binary tree, write a function to get the maximum width of the given tree. Width of a tree is maximum of widths of all levels.
Let us consider the below example tree.

         1
        /  \
       2    3
     /  \     \
    4    5     8 
              /  \
             6    7
For the above tree,
width of level 1 is 1,
width of level 2 is 2,
width of level 3 is 3
width of level 4 is 2.

So the maximum width of the tree is 3.

int getMaxWidth(node *root)
{
	int height=getHeight(root)
	int max=0;
	for(int i=1;i<=height;i++)
	{
	  int width=getwidth(root,i)
	 if(width>max)
		max=width;
	}

return max
}

int getwidth(node *root,int i)
{
	if (root==null)
		return 0

	if(i==1)
		return 1

	else if (i>1)
		getwidth(root->left,i-1)+getwidth(root->right,i-1)

	
}