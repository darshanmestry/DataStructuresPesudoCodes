o(sum*n)

bool[,] dp;
void printALLSubsets(int[] arr,int n,int sum)
{
	dp=new bool[n,sum+1]
	if(sum<0)
		return

	for(int i=0;i<n;i++)
	{
		dp[i,0]=true;
	}

	if(Arr[0]<=sum)
		dp[0,arr[0]]=true;

	for(int i=1;i<n;i++)
	{
		for(int j=0;j<sum+1;j++)
		{
			dp[i,j]=(att[i]<j)?(dp[i-1,j)||arr[i,j-arr[i]): dp[i-1,j]
		}
	}

	if(!dp[n-1,sum])
		return "No subset"

	List<int> lis=new List<int>();
	printSubSetRec(arr,n,sum,lis)
}

void printSubSetRec(int[] arr,int i,int sum,List<int> sum)
{
	 // If we reached end and sum is non-zero. We print 
        // list[] only if arr[0] is equal to sum OR dp[0][sum] 
	if(i==0 && dp[0,sum] && sum!=0)
	{
		lis.Add(arr[i])
		Print(Lis)
		lis.clear();
	}
	
	
       // If sum becomes 0 
	if(sum==0 && i==0)
	{
		Display(lis)
		return	
	}

	 // If given sum can be achieved after ignoring 
        // current element. 
	if(dp[i-1,sum])
	{
		List<int> lis2 =new List<int>()
		lis2.add(arr[i-1])

		printSubSetRec(arr,i-1,sum,lis2)
	}

	// If given sum can be achieved after considering 
        // current element. 
	if(sum>=arr[i]&& dp[i-1,sum-arr[i])
	{	
	  lis.add(arr[i])
          (arr,i-1,sum-arr[i],lis)	
	}

	
}